// Do not edit: This code was generated by flatdata's generator.
pub mod osm {

pub mod schema {
pub mod structs {
pub const HEADER: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 40;
    bbox_right : i64 : 40;
    bbox_top : i64 : 40;
    bbox_bottom : i64 : 40;
    required_feature_first_idx : u64 : 40;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u64 : 40;
    optional_features_size : u32 : 4;
    writingprogram_idx : u64 : 40;
    source_idx : u64 : 40;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u64 : 40;
}
}

"#;
pub const TAG: &str = r#"namespace osm {
struct Tag
{
    key_idx : u64 : 40;
    value_idx : u64 : 40;
}
}

"#;
pub const NODE: &str = r#"namespace osm {
struct Node
{
    id : i64 : 40;
    lat : i64 : 40;
    lon : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

"#;
pub const NODE_INDEX: &str = r#"namespace osm {
struct NodeIndex
{
    value : u64 : 40;
}
}

"#;
pub const WAY: &str = r#"namespace osm {
struct Way
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
    @range( refs )
    ref_first_idx : u64 : 40;
}
}

"#;
pub const TAG_INDEX: &str = r#"namespace osm {
struct TagIndex
{
    value : u64 : 40;
}
}

"#;
pub const NODE_MEMBER: &str = r#"namespace osm {
struct NodeMember
{
    node_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

"#;
pub const WAY_MEMBER: &str = r#"namespace osm {
struct WayMember
{
    way_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

"#;
pub const RELATION_MEMBER: &str = r#"namespace osm {
struct RelationMember
{
    relation_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

"#;
pub const RELATION: &str = r#"namespace osm {
struct Relation
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

"#;}pub mod osm {
pub const OSM: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 40;
    bbox_right : i64 : 40;
    bbox_top : i64 : 40;
    bbox_bottom : i64 : 40;
    required_feature_first_idx : u64 : 40;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u64 : 40;
    optional_features_size : u32 : 4;
    writingprogram_idx : u64 : 40;
    source_idx : u64 : 40;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u64 : 40;
}
}

namespace osm {
struct Node
{
    id : i64 : 40;
    lat : i64 : 40;
    lon : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

namespace osm {
struct Way
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
    @range( refs )
    ref_first_idx : u64 : 40;
}
}

namespace osm {
struct Relation
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

namespace osm {
struct NodeMember
{
    node_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
struct WayMember
{
    way_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
struct RelationMember
{
    relation_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
struct Tag
{
    key_idx : u64 : 40;
    value_idx : u64 : 40;
}
}

namespace osm {
struct TagIndex
{
    value : u64 : 40;
}
}

namespace osm {
struct NodeIndex
{
    value : u64 : 40;
}
}

namespace osm {
const u64 INVALID_IDX = 1099511627775;
}

namespace osm {
const u64 COORD_SCALE = 1000000000;
}

namespace osm {
@bound_implicitly( Relations : .osm.Osm.relations, .osm.Osm.relation_members )
archive Osm
{
    @explicit_reference( .osm.Header.required_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.optional_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.writingprogram_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.source_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.osmosis_replication_base_url_idx, .osm.Osm.stringtable )
    header : .osm.Header;
    @explicit_reference( .osm.Node.tag_first_idx, .osm.Osm.tags_index )
    nodes : vector< .osm.Node >;
    @explicit_reference( .osm.Way.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Way.ref_first_idx, .osm.Osm.nodes_index )
    ways : vector< .osm.Way >;
    @explicit_reference( .osm.Relation.tag_first_idx, .osm.Osm.tags_index )
    relations : vector< .osm.Relation >;
    @explicit_reference( .osm.NodeMember.node_idx, .osm.Osm.nodes )
    @explicit_reference( .osm.NodeMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.WayMember.way_idx, .osm.Osm.ways )
    @explicit_reference( .osm.WayMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.RelationMember.relation_idx, .osm.Osm.relations )
    @explicit_reference( .osm.RelationMember.role_idx, .osm.Osm.stringtable )
    relation_members : multivector< 40, .osm.NodeMember, .osm.WayMember, .osm.RelationMember >;
    @explicit_reference( .osm.Tag.key_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Tag.value_idx, .osm.Osm.stringtable )
    tags : vector< .osm.Tag >;
    @explicit_reference( .osm.TagIndex.value, .osm.Osm.tags )
    tags_index : vector< .osm.TagIndex >;
    @explicit_reference( .osm.NodeIndex.value, .osm.Osm.nodes )
    nodes_index : vector< .osm.NodeIndex >;
    stringtable : raw_data;
}
}

"#;
pub mod resources {pub const HEADER: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 40;
    bbox_right : i64 : 40;
    bbox_top : i64 : 40;
    bbox_bottom : i64 : 40;
    required_feature_first_idx : u64 : 40;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u64 : 40;
    optional_features_size : u32 : 4;
    writingprogram_idx : u64 : 40;
    source_idx : u64 : 40;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Header.required_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.optional_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.writingprogram_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.source_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.osmosis_replication_base_url_idx, .osm.Osm.stringtable )
    header : .osm.Header;
}
}

"#;pub const NODES: &str = r#"namespace osm {
struct Node
{
    id : i64 : 40;
    lat : i64 : 40;
    lon : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Node.tag_first_idx, .osm.Osm.tags_index )
    nodes : vector< .osm.Node >;
}
}

"#;pub const WAYS: &str = r#"namespace osm {
struct Way
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
    @range( refs )
    ref_first_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Way.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Way.ref_first_idx, .osm.Osm.nodes_index )
    ways : vector< .osm.Way >;
}
}

"#;pub const RELATIONS: &str = r#"namespace osm {
struct Relation
{
    id : i64 : 40;
    @range( tags )
    tag_first_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Relation.tag_first_idx, .osm.Osm.tags_index )
    relations : vector< .osm.Relation >;
}
}

"#;pub const RELATION_MEMBERS: &str = r#"namespace osm {
struct NodeMember
{
    node_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
struct WayMember
{
    way_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
struct RelationMember
{
    relation_idx : u64 : 40;
    role_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.NodeMember.node_idx, .osm.Osm.nodes )
    @explicit_reference( .osm.NodeMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.WayMember.way_idx, .osm.Osm.ways )
    @explicit_reference( .osm.WayMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.RelationMember.relation_idx, .osm.Osm.relations )
    @explicit_reference( .osm.RelationMember.role_idx, .osm.Osm.stringtable )
    relation_members : multivector< 40, .osm.NodeMember, .osm.WayMember, .osm.RelationMember >;
}
}

"#;pub const TAGS: &str = r#"namespace osm {
struct Tag
{
    key_idx : u64 : 40;
    value_idx : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Tag.key_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Tag.value_idx, .osm.Osm.stringtable )
    tags : vector< .osm.Tag >;
}
}

"#;pub const TAGS_INDEX: &str = r#"namespace osm {
struct TagIndex
{
    value : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.TagIndex.value, .osm.Osm.tags )
    tags_index : vector< .osm.TagIndex >;
}
}

"#;pub const NODES_INDEX: &str = r#"namespace osm {
struct NodeIndex
{
    value : u64 : 40;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.NodeIndex.value, .osm.Osm.nodes )
    nodes_index : vector< .osm.NodeIndex >;
}
}

"#;pub const STRINGTABLE: &str = r#"namespace osm {
archive Osm
{
    stringtable : raw_data;
}
}

"#;}
}
}
    // Max 40 bits value used to indicate null references
pub const INVALID_IDX: u64 = 1_099_511_627_775;

    // All coordinate were scaled by this to convert them to integers
pub const COORD_SCALE: u64 = 1_000_000_000;


define_struct!(
    Header,
    RefHeader,
    RefMutHeader,
    schema::structs::HEADER,
    62,
    (bbox_left, set_bbox_left, i64, i64, 0, 40),
    (bbox_right, set_bbox_right, i64, i64, 40, 40),
    (bbox_top, set_bbox_top, i64, i64, 80, 40),
    (bbox_bottom, set_bbox_bottom, i64, i64, 120, 40),
    (required_feature_first_idx, set_required_feature_first_idx, u64, u64, 160, 40),
    (required_features_size, set_required_features_size, u32, u32, 200, 4),
    (optional_feature_first_idx, set_optional_feature_first_idx, u64, u64, 204, 40),
    (optional_features_size, set_optional_features_size, u32, u32, 244, 4),
    (writingprogram_idx, set_writingprogram_idx, u64, u64, 248, 40),
    (source_idx, set_source_idx, u64, u64, 288, 40),
    (osmosis_replication_timestamp, set_osmosis_replication_timestamp, i64, i64, 328, 64),
    (osmosis_replication_sequence_number, set_osmosis_replication_sequence_number, i64, i64, 392, 64),
    (osmosis_replication_base_url_idx, set_osmosis_replication_base_url_idx, u64, u64, 456, 40));


define_struct!(
    Tag,
    RefTag,
    RefMutTag,
    schema::structs::TAG,
    10,
    (key_idx, set_key_idx, u64, u64, 0, 40),
    (value_idx, set_value_idx, u64, u64, 40, 40));


define_struct!(
    Node,
    RefNode,
    RefMutNode,
    schema::structs::NODE,
    20,
    (id, set_id, i64, i64, 0, 40),
    (lat, set_lat, i64, i64, 40, 40),
    (lon, set_lon, i64, i64, 80, 40),
    (tag_first_idx, set_tag_first_idx, u64, u64, 120, 40),
    range(tags, u64, 120, 40)
);

/// A struct indexing a node.
define_struct!(
    NodeIndex,
    RefNodeIndex,
    RefMutNodeIndex,
    schema::structs::NODE_INDEX,
    5,
    (value, set_value, u64, u64, 0, 40));


define_struct!(
    Way,
    RefWay,
    RefMutWay,
    schema::structs::WAY,
    15,
    (id, set_id, i64, i64, 0, 40),
    (tag_first_idx, set_tag_first_idx, u64, u64, 40, 40),
    (ref_first_idx, set_ref_first_idx, u64, u64, 80, 40),
    range(tags, u64, 40, 40)
,
    range(refs, u64, 80, 40)
);

/// A struct indexing a tag.
define_struct!(
    TagIndex,
    RefTagIndex,
    RefMutTagIndex,
    schema::structs::TAG_INDEX,
    5,
    (value, set_value, u64, u64, 0, 40));


define_struct!(
    NodeMember,
    RefNodeMember,
    RefMutNodeMember,
    schema::structs::NODE_MEMBER,
    10,
    (node_idx, set_node_idx, u64, u64, 0, 40),
    (role_idx, set_role_idx, u64, u64, 40, 40));


define_struct!(
    WayMember,
    RefWayMember,
    RefMutWayMember,
    schema::structs::WAY_MEMBER,
    10,
    (way_idx, set_way_idx, u64, u64, 0, 40),
    (role_idx, set_role_idx, u64, u64, 40, 40));


define_struct!(
    RelationMember,
    RefRelationMember,
    RefMutRelationMember,
    schema::structs::RELATION_MEMBER,
    10,
    (relation_idx, set_relation_idx, u64, u64, 0, 40),
    (role_idx, set_role_idx, u64, u64, 40, 40));


define_struct!(
    Relation,
    RefRelation,
    RefMutRelation,
    schema::structs::RELATION,
    10,
    (id, set_id, i64, i64, 0, 40),
    (tag_first_idx, set_tag_first_idx, u64, u64, 40, 40),
    range(tags, u64, 40, 40)
);



/// Builtin union type of .osm.NodeMember, .osm.WayMember, .osm.RelationMember.
define_variadic_struct!(RelationMembers, RefRelationMembers, BuilderRelationMembers,
    super::_builtin::multivector::IndexType40,
    0 => ( NodeMember, super::osm::NodeMember, add_node_member),
    1 => ( WayMember, super::osm::WayMember, add_way_member),
    2 => ( RelationMember, super::osm::RelationMember, add_relation_member));

define_archive!(Osm, OsmBuilder, schema::osm::OSM;
    struct(header, false, schema::osm::resources::HEADER, set_header, super::osm::Header),
    vector(nodes, false, schema::osm::resources::NODES, set_nodes, start_nodes, super::osm::Node),
    vector(ways, false, schema::osm::resources::WAYS, set_ways, start_ways, super::osm::Way),
    vector(relations, false, schema::osm::resources::RELATIONS, set_relations, start_relations, super::osm::Relation),
    multivector(relation_members, false, schema::osm::resources::RELATION_MEMBERS, start_relation_members, RelationMembers, relation_members_index, super::_builtin::multivector::IndexType40),
    vector(tags, false, schema::osm::resources::TAGS, set_tags, start_tags, super::osm::Tag),
    vector(tags_index, false, schema::osm::resources::TAGS_INDEX, set_tags_index, start_tags_index, super::osm::TagIndex),
    vector(nodes_index, false, schema::osm::resources::NODES_INDEX, set_nodes_index, start_nodes_index, super::osm::NodeIndex),
    raw_data(stringtable, false, schema::osm::resources::STRINGTABLE, set_stringtable),
);

}

pub mod _builtin {

pub mod multivector {

pub mod schema {
pub mod structs {
pub const INDEX_TYPE40: &str = r#""#;}}
/// Builtin type to for MultiVector index
define_index!(
    IndexType40,
    RefIndexType40,
    RefMutIndexType40,
    schema::structs::INDEX_TYPE40,
    5,
    40
);

}

pub mod schema {
pub mod structs {}}
}
