// Do not edit: This code was generated by flatdata's generator.


pub mod schema {
    pub mod structs {
        pub const HEADER: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 64;
    bbox_right : i64 : 64;
    bbox_top : i64 : 64;
    bbox_bottom : i64 : 64;
    required_feature_first_idx : u32 : 32;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u32 : 32;
    optional_features_size : u32 : 4;
    writingprogram_idx : u32 : 32;
    source_idx : u32 : 32;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u32 : 32;
}
}

"#;
        pub const INFO: &str = r#"namespace osm {
struct Info
{
    version : i32 : 32;
    timestamp : i64 : 64;
    changest : i64 : 64;
    uid : i32 : 32;
    user_idx : u32 : 32;
    visible : bool : 1;
}
}

"#;
        pub const TAG: &str = r#"namespace osm {
struct Tag
{
    key_idx : u32 : 32;
    value_idx : u32 : 32;
}
}

"#;
        pub const NODE: &str = r#"namespace osm {
struct Node
{
    id : i64 : 64;
    lat : i64 : 64;
    lon : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

"#;
        pub const NODE_INDEX: &str = r#"namespace osm {
struct NodeIndex
{
    value : u32 : 32;
}
}

"#;
        pub const WAY: &str = r#"namespace osm {
struct Way
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    ref_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

"#;
        pub const TAG_INDEX: &str = r#"namespace osm {
struct TagIndex
{
    value : u32 : 32;
}
}

"#;
        pub const NODE_MEMBER: &str = r#"namespace osm {
struct NodeMember
{
    node_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

"#;
        pub const WAY_MEMBER: &str = r#"namespace osm {
struct WayMember
{
    way_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

"#;
        pub const RELATION_MEMBER: &str = r#"namespace osm {
struct RelationMember
{
    relation_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

"#;
        pub const RELATION: &str = r#"namespace osm {
struct Relation
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

"#;
        pub const INDEX_TYPE32: &str = r#""#;
        pub const OSM: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 64;
    bbox_right : i64 : 64;
    bbox_top : i64 : 64;
    bbox_bottom : i64 : 64;
    required_feature_first_idx : u32 : 32;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u32 : 32;
    optional_features_size : u32 : 4;
    writingprogram_idx : u32 : 32;
    source_idx : u32 : 32;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u32 : 32;
}
}

namespace osm {
struct Node
{
    id : i64 : 64;
    lat : i64 : 64;
    lon : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
struct Way
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    ref_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
struct Relation
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
struct NodeMember
{
    node_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
struct WayMember
{
    way_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
struct RelationMember
{
    relation_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
struct Tag
{
    key_idx : u32 : 32;
    value_idx : u32 : 32;
}
}

namespace osm {
struct Info
{
    version : i32 : 32;
    timestamp : i64 : 64;
    changest : i64 : 64;
    uid : i32 : 32;
    user_idx : u32 : 32;
    visible : bool : 1;
}
}

namespace osm {
struct TagIndex
{
    value : u32 : 32;
}
}

namespace osm {
struct NodeIndex
{
    value : u32 : 32;
}
}

namespace osm {
const u32 INVALID_IDX = 0;
}

namespace osm {
@bound_implicitly( Relations : .osm.Osm.relations, .osm.Osm.relation_members )
archive Osm
{
    @explicit_reference( .osm.Header.required_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.optional_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.writingprogram_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.source_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.osmosis_replication_base_url_idx, .osm.Osm.stringtable )
    header : .osm.Header;
    @explicit_reference( .osm.Node.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Node.info_idx, .osm.Osm.infos )
    nodes : vector< .osm.Node >;
    @explicit_reference( .osm.Way.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Way.info_idx, .osm.Osm.infos )
    @explicit_reference( .osm.Way.ref_first_idx, .osm.Osm.nodes_index )
    ways : vector< .osm.Way >;
    @explicit_reference( .osm.Relation.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Relation.info_idx, .osm.Osm.infos )
    relations : vector< .osm.Relation >;
    @explicit_reference( .osm.NodeMember.node_idx, .osm.Osm.nodes )
    @explicit_reference( .osm.NodeMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.WayMember.way_idx, .osm.Osm.ways )
    @explicit_reference( .osm.WayMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.RelationMember.relation_idx, .osm.Osm.relations )
    @explicit_reference( .osm.RelationMember.role_idx, .osm.Osm.stringtable )
    relation_members : multivector< 32, .osm.NodeMember, .osm.WayMember, .osm.RelationMember >;
    @explicit_reference( .osm.Tag.key_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Tag.value_idx, .osm.Osm.stringtable )
    tags : vector< .osm.Tag >;
    @explicit_reference( .osm.Info.user_idx, .osm.Osm.stringtable )
    infos : vector< .osm.Info >;
    @explicit_reference( .osm.TagIndex.value, .osm.Osm.tags )
    tags_index : vector< .osm.TagIndex >;
    @explicit_reference( .osm.NodeIndex.value, .osm.Osm.nodes )
    nodes_index : vector< .osm.NodeIndex >;
    stringtable : raw_data;
}
}

"#;
    }

    pub mod resources {
        pub mod osm {
pub const HEADER: &str = r#"namespace osm {
struct Header
{
    bbox_left : i64 : 64;
    bbox_right : i64 : 64;
    bbox_top : i64 : 64;
    bbox_bottom : i64 : 64;
    required_feature_first_idx : u32 : 32;
    required_features_size : u32 : 4;
    optional_feature_first_idx : u32 : 32;
    optional_features_size : u32 : 4;
    writingprogram_idx : u32 : 32;
    source_idx : u32 : 32;
    osmosis_replication_timestamp : i64 : 64;
    osmosis_replication_sequence_number : i64 : 64;
    osmosis_replication_base_url_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Header.required_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.optional_feature_first_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.writingprogram_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.source_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Header.osmosis_replication_base_url_idx, .osm.Osm.stringtable )
    header : .osm.Header;
}
}

"#;
pub const NODES: &str = r#"namespace osm {
struct Node
{
    id : i64 : 64;
    lat : i64 : 64;
    lon : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Node.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Node.info_idx, .osm.Osm.infos )
    nodes : vector< .osm.Node >;
}
}

"#;
pub const WAYS: &str = r#"namespace osm {
struct Way
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    ref_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Way.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Way.info_idx, .osm.Osm.infos )
    @explicit_reference( .osm.Way.ref_first_idx, .osm.Osm.nodes_index )
    ways : vector< .osm.Way >;
}
}

"#;
pub const RELATIONS: &str = r#"namespace osm {
struct Relation
{
    id : i64 : 64;
    tag_first_idx : u32 : 32;
    info_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Relation.tag_first_idx, .osm.Osm.tags_index )
    @explicit_reference( .osm.Relation.info_idx, .osm.Osm.infos )
    relations : vector< .osm.Relation >;
}
}

"#;
pub const RELATION_MEMBERS: &str = r#"namespace osm {
struct NodeMember
{
    node_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
struct WayMember
{
    way_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
struct RelationMember
{
    relation_idx : u32 : 32;
    role_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.NodeMember.node_idx, .osm.Osm.nodes )
    @explicit_reference( .osm.NodeMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.WayMember.way_idx, .osm.Osm.ways )
    @explicit_reference( .osm.WayMember.role_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.RelationMember.relation_idx, .osm.Osm.relations )
    @explicit_reference( .osm.RelationMember.role_idx, .osm.Osm.stringtable )
    relation_members : multivector< 32, .osm.NodeMember, .osm.WayMember, .osm.RelationMember >;
}
}

"#;
pub const TAGS: &str = r#"namespace osm {
struct Tag
{
    key_idx : u32 : 32;
    value_idx : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Tag.key_idx, .osm.Osm.stringtable )
    @explicit_reference( .osm.Tag.value_idx, .osm.Osm.stringtable )
    tags : vector< .osm.Tag >;
}
}

"#;
pub const INFOS: &str = r#"namespace osm {
struct Info
{
    version : i32 : 32;
    timestamp : i64 : 64;
    changest : i64 : 64;
    uid : i32 : 32;
    user_idx : u32 : 32;
    visible : bool : 1;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.Info.user_idx, .osm.Osm.stringtable )
    infos : vector< .osm.Info >;
}
}

"#;
pub const TAGS_INDEX: &str = r#"namespace osm {
struct TagIndex
{
    value : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.TagIndex.value, .osm.Osm.tags )
    tags_index : vector< .osm.TagIndex >;
}
}

"#;
pub const NODES_INDEX: &str = r#"namespace osm {
struct NodeIndex
{
    value : u32 : 32;
}
}

namespace osm {
archive Osm
{
    @explicit_reference( .osm.NodeIndex.value, .osm.Osm.nodes )
    nodes_index : vector< .osm.NodeIndex >;
}
}

"#;
pub const STRINGTABLE: &str = r#"namespace osm {
archive Osm
{
    stringtable : raw_data;
}
}

"#;
        }
    }
}

pub const INVALID_IDX: u32 = 0;

define_struct!(
    Header,
    RefHeader,
    RefMutHeader,
    schema::structs::HEADER,
    69,
    (bbox_left, set_bbox_left, i64, 0, 64),
    (bbox_right, set_bbox_right, i64, 64, 64),
    (bbox_top, set_bbox_top, i64, 128, 64),
    (bbox_bottom, set_bbox_bottom, i64, 192, 64),
    (required_feature_first_idx, set_required_feature_first_idx, u32, 256, 32),
    (required_features_size, set_required_features_size, u32, 288, 4),
    (optional_feature_first_idx, set_optional_feature_first_idx, u32, 292, 32),
    (optional_features_size, set_optional_features_size, u32, 324, 4),
    (writingprogram_idx, set_writingprogram_idx, u32, 328, 32),
    (source_idx, set_source_idx, u32, 360, 32),
    (osmosis_replication_timestamp, set_osmosis_replication_timestamp, i64, 392, 64),
    (osmosis_replication_sequence_number, set_osmosis_replication_sequence_number, i64, 456, 64),
    (osmosis_replication_base_url_idx, set_osmosis_replication_base_url_idx, u32, 520, 32));


define_struct!(
    Info,
    RefInfo,
    RefMutInfo,
    schema::structs::INFO,
    29,
    (version, set_version, i32, 0, 32),
    (timestamp, set_timestamp, i64, 32, 64),
    (changest, set_changest, i64, 96, 64),
    (uid, set_uid, i32, 160, 32),
    (user_idx, set_user_idx, u32, 192, 32),
    (visible, set_visible, bool, 224, 1));


define_struct!(
    Tag,
    RefTag,
    RefMutTag,
    schema::structs::TAG,
    8,
    (key_idx, set_key_idx, u32, 0, 32),
    (value_idx, set_value_idx, u32, 32, 32));


define_struct!(
    Node,
    RefNode,
    RefMutNode,
    schema::structs::NODE,
    32,
    (id, set_id, i64, 0, 64),
    (lat, set_lat, i64, 64, 64),
    (lon, set_lon, i64, 128, 64),
    (tag_first_idx, set_tag_first_idx, u32, 192, 32),
    (info_idx, set_info_idx, u32, 224, 32));

/// A struct indexing a node.
define_struct!(
    NodeIndex,
    RefNodeIndex,
    RefMutNodeIndex,
    schema::structs::NODE_INDEX,
    4,
    (value, set_value, u32, 0, 32));


define_struct!(
    Way,
    RefWay,
    RefMutWay,
    schema::structs::WAY,
    20,
    (id, set_id, i64, 0, 64),
    (tag_first_idx, set_tag_first_idx, u32, 64, 32),
    (ref_first_idx, set_ref_first_idx, u32, 96, 32),
    (info_idx, set_info_idx, u32, 128, 32));

/// A struct indexing a tag.
define_struct!(
    TagIndex,
    RefTagIndex,
    RefMutTagIndex,
    schema::structs::TAG_INDEX,
    4,
    (value, set_value, u32, 0, 32));


define_struct!(
    NodeMember,
    RefNodeMember,
    RefMutNodeMember,
    schema::structs::NODE_MEMBER,
    8,
    (node_idx, set_node_idx, u32, 0, 32),
    (role_idx, set_role_idx, u32, 32, 32));


define_struct!(
    WayMember,
    RefWayMember,
    RefMutWayMember,
    schema::structs::WAY_MEMBER,
    8,
    (way_idx, set_way_idx, u32, 0, 32),
    (role_idx, set_role_idx, u32, 32, 32));


define_struct!(
    RelationMember,
    RefRelationMember,
    RefMutRelationMember,
    schema::structs::RELATION_MEMBER,
    8,
    (relation_idx, set_relation_idx, u32, 0, 32),
    (role_idx, set_role_idx, u32, 32, 32));


define_struct!(
    Relation,
    RefRelation,
    RefMutRelation,
    schema::structs::RELATION,
    16,
    (id, set_id, i64, 0, 64),
    (tag_first_idx, set_tag_first_idx, u32, 64, 32),
    (info_idx, set_info_idx, u32, 96, 32));

/// Builtin type to for MultiVector index
define_index!(
    IndexType32,
    RefIndexType32,
    RefMutIndexType32,
    schema::structs::INDEX_TYPE32,
    4,
    32
);


/// Builtin union type of NodeMember, WayMember, RelationMember.
define_variadic_struct!(RelationMembers, RefRelationMembers, BuilderRelationMembers,
    IndexType32,
    0 => (NodeMember, add_node_member),
    1 => (WayMember, add_way_member),
    2 => (RelationMember, add_relation_member));

define_archive!(Osm, OsmBuilder,
    schema::structs::OSM;
    // struct resources
    (header, set_header,
        Header, schema::resources::osm::HEADER, false);
    // vector resources
    (nodes, set_nodes, start_nodes,
        Node, schema::resources::osm::NODES, false),
    (ways, set_ways, start_ways,
        Way, schema::resources::osm::WAYS, false),
    (relations, set_relations, start_relations,
        Relation, schema::resources::osm::RELATIONS, false),
    (tags, set_tags, start_tags,
        Tag, schema::resources::osm::TAGS, false),
    (infos, set_infos, start_infos,
        Info, schema::resources::osm::INFOS, false),
    (tags_index, set_tags_index, start_tags_index,
        TagIndex, schema::resources::osm::TAGS_INDEX, false),
    (nodes_index, set_nodes_index, start_nodes_index,
        NodeIndex, schema::resources::osm::NODES_INDEX, false);
    // multivector resources
    (relation_members, start_relation_members,
        RelationMembers, schema::resources::osm::RELATION_MEMBERS,
        relation_members_index, IndexType32, false);
    // raw data resources
    (stringtable, set_stringtable,
        schema::resources::osm::STRINGTABLE, false);
    // subarchives
);

