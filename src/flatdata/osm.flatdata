namespace osm {

// Max 40 bits value used to indicate null references
const u64 INVALID_IDX = 0xFFFFFFFFFF;

// All coordinate were scaled by this to convert them to integers
const u64 COORD_SCALE = 1000000000;

struct Header {
    bbox_left: i64 : 64;
    bbox_right: i64 : 64;
    bbox_top: i64 : 64;
    bbox_bottom: i64 : 64;

    required_feature_first_idx: u64 : 40;
    required_features_size: u32 : 4;
    optional_feature_first_idx: u64 : 40;
    optional_features_size: u32 : 4;

    writingprogram_idx: u64 : 40;
    source_idx: u64 : 40;

    osmosis_replication_timestamp: i64 : 64;
    osmosis_replication_sequence_number: i64 : 64;
    osmosis_replication_base_url_idx: u64 : 40;
}

struct Info {
    version: i32 : 32;
    timestamp: i64 : 64;
    changest: i64 : 64;
    uid: i32 : 32;
    user_idx: u64 : 40;
    visible: bool : 1;
}

struct Tag {
    key_idx: u64 : 40;
    value_idx: u64 : 40;
}

struct Node {
    id: i64 : 64;
    lat: i64 : 64;
    lon: i64 : 64;
    @range(tags)
    tag_first_idx: u64 : 40;
    info_idx: u64 : 40;
}

/**
 * A struct indexing a node.
 */
struct NodeIndex {
    value: u64 : 40;
}

struct Way {
    id: i64 : 64;
    @range(tags)
    tag_first_idx: u64 : 40;
    @range(refs)
    ref_first_idx: u64 : 40;
    info_idx: u64 : 40;
}

/**
 * A struct indexing a tag.
 */
struct TagIndex {
    value: u64 : 40;
}

struct NodeMember {
    node_idx: u64 : 40;
    role_idx: u64 : 40;
}

struct WayMember {
    way_idx: u64 : 40;
    role_idx: u64 : 40;
}

struct RelationMember {
    relation_idx: u64 : 40;
    role_idx: u64 : 40;
}

struct Relation {
    id: i64 : 64;
    @range(tags)
    tag_first_idx: u64 : 40;
    info_idx: u64 : 40;
}

@bound_implicitly(Relations: relations, relation_members)
archive Osm {
    @explicit_reference( Header.required_feature_first_idx, stringtable )
    @explicit_reference( Header.optional_feature_first_idx, stringtable )
    @explicit_reference( Header.writingprogram_idx, stringtable )
    @explicit_reference( Header.source_idx, stringtable )
    @explicit_reference( Header.osmosis_replication_base_url_idx, stringtable )
    header: Header;

    @explicit_reference( Node.tag_first_idx, tags_index )
    @explicit_reference( Node.info_idx, infos )
    nodes: vector<Node>;

    @explicit_reference( Way.tag_first_idx, tags_index )
    @explicit_reference( Way.info_idx, infos )
    @explicit_reference( Way.ref_first_idx, nodes_index )
    ways: vector<Way>;

    @explicit_reference( Relation.tag_first_idx, tags_index )
    @explicit_reference( Relation.info_idx, infos )
    relations: vector<Relation>;

    @explicit_reference( NodeMember.node_idx, nodes )
    @explicit_reference( NodeMember.role_idx, stringtable )
    @explicit_reference( WayMember.way_idx, ways )
    @explicit_reference( WayMember.role_idx, stringtable )
    @explicit_reference( RelationMember.relation_idx, relations )
    @explicit_reference( RelationMember.role_idx, stringtable )
    relation_members: multivector<40, NodeMember, WayMember, RelationMember>;

    @explicit_reference( Tag.key_idx, stringtable )
    @explicit_reference( Tag.value_idx, stringtable )
    tags: vector<Tag>;

    @explicit_reference( Info.user_idx, stringtable )
    infos: vector<Info>;

    @explicit_reference( TagIndex.value, tags )
    tags_index: vector<TagIndex>;

    @explicit_reference( NodeIndex.value, nodes )
    nodes_index: vector<NodeIndex>;

    /**
     * List of strings separated by \0.
     */
    stringtable: raw_data;
}
} // namespace osm
